{"version":3,"sources":["component/DashboardScreen/DashboardScreen.tsx","routes.tsx","serviceWorker.ts","index.tsx"],"names":["DashboardScreen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","source","play","bind","assertThisInitialized","pause","load","changeCurrentTime","seek","changePlaybackRateRate","changeVolume","setMuted","socket","SocketIOClient","on","message","console","log","data","result","JSON","parse","prevState","setState","player","refs","seconds","_this2","currentTime","getState","_this3","steps","_this4","playbackRate","_this5","volume","muted","_this6","react_default","a","createElement","className","style","alignItems","textAlign","marginTop","lib","ref","src","autoHide","Component","routes","react_router_dom","react_router","exact","path","component","Error","render","Boolean","window","location","hostname","match","ReactDOM","src_routes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f3361f5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactPlayer from 'react-player'\nimport { Player, ControlBar } from 'video-react';\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\nimport SocketIOClient from 'socket.io-client';\n\n\nexport default class DashboardScreen extends Component<any, any> {\n    constructor ( props: any ) {\n        super( props );\n        this.state = {\n            source: [ \"http://media.w3.org/2010/05/sintel/trailer.mp4\",\n                \"https://media.w3.org/2010/05/sintel/trailer_hd.mp4\",\n                \"http://media.w3.org/2010/05/bunny/movie.mp4\",\n                \"https://media.w3.org/2010/05/sintel/trailer_hd.mp4\",\n                \"http://media.w3.org/2010/05/bunny/movie.mp4\",\n                \"http://media.w3.org/2010/05/sintel/trailer.mp4\"\n            ]\n        };\n        this.play = this.play.bind( this );\n        this.pause = this.pause.bind( this );\n        this.load = this.load.bind( this );\n        this.changeCurrentTime = this.changeCurrentTime.bind( this );\n        this.seek = this.seek.bind( this );\n        this.changePlaybackRateRate = this.changePlaybackRateRate.bind( this );\n        this.changeVolume = this.changeVolume.bind( this );\n        this.setMuted = this.setMuted.bind( this );\n        this.socket = SocketIOClient( 'http://round.cmshuawei.com:80' );\n    }\n\n    componentDidMount() {\n        // subscribe state change\n        // this.refs.player.subscribeToStateChange( this.handleStateChange.bind( this ) );\n        // this.refs.player4.play();\n        // setTimeout( () => {\n        //     this.refs.player4.load();\n        // }, 5000 );\n\n\n\n\n\n        // this.state.socket.on( 'videoPlay', player => {\n        //     console.log( 'play' );\n        //     console.log( { player } );\n        // } );\n\n        // this.state.socket.on( 'videoLoad', player => {\n        //     console.log( 'playLoad' );\n        //     console.log( { player } );\n        // } );\n\n        this.socket.on( 'videoPlay', ( message ) => {\n            console.log( { message } );\n        } );\n\n    }\n\n\n\n\n    handleData( data ) {\n        let result = JSON.parse( data );\n        console.log( { result, data } );\n        console.log( 'websocket' );\n\n\n    }\n\n\n    playerPlay() {\n\n    }\n\n\n    handleStateChange( state, prevState ) {\n        // copy player state to this component's state\n        this.setState( {\n            player: state\n        } );\n    }\n\n    play() {\n        this.refs.player.play();\n    }\n\n    pause() {\n        this.refs.player.pause();\n    }\n\n    load() {\n        this.refs.player.load();\n    }\n\n    changeCurrentTime( seconds ) {\n        return () => {\n            const { player } = this.refs.player.getState();\n            const currentTime = player.currentTime;\n            this.refs.player.seek( currentTime + seconds );\n        };\n    }\n\n    seek( seconds ) {\n        return () => {\n            this.refs.player.seek( seconds );\n        };\n    }\n\n    changePlaybackRateRate( steps ) {\n        return () => {\n            const { player } = this.refs.player.getState();\n            const playbackRate = player.playbackRate;\n            this.refs.player.playbackRate = playbackRate + steps;\n        };\n    }\n\n    changeVolume( steps ) {\n        return () => {\n            const { player } = this.refs.player.getState();\n            const volume = player.volume;\n            this.refs.player.volume = volume + steps;\n        };\n    }\n\n    setMuted( muted ) {\n        return () => {\n            this.refs.player.muted = muted;\n        };\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"app flex-row align-items-center\">\n                <div className=\"from-gorup\" style={ { alignItems: \"center\", textAlign: \"center\", marginTop: '7%' } }>\n                    <div className=\"form-group\">\n                        <div className=\"col-md-4\">\n                            <Player ref=\"player\" >\n                                <source src={ this.state.source[ 0 ] } />\n                                <ControlBar autoHide={ false } />\n                            </Player>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <Player ref=\"player1\" >\n                                <source src={ this.state.source[ 1 ] } />\n                                <ControlBar autoHide={ false } />\n                            </Player>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <Player ref=\"player2\" >\n                                <source src={ this.state.source[ 2 ] } />\n                                <ControlBar autoHide={ false } />\n                            </Player>\n                        </div>\n                        <div className=\"clearfix\"></div>\n                    </div>\n                    <div className=\"form-group\">\n                        <div className=\"col-md-4\" >\n                            <Player ref=\"player3\" >\n                                <source src={ this.state.source[ 3 ] } />\n                                <ControlBar autoHide={ false } />\n                            </Player>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <Player ref=\"player4\" >\n                                <source src={ this.state.source[ 4 ] } />\n                                <ControlBar autoHide={ false } />\n                            </Player>\n                        </div>\n                        <div className=\"col-md-4\">\n                            <Player ref=\"player5\" >\n                                <source src={ this.state.source[ 5 ] } />\n                                <ControlBar autoHide={ false } />\n                            </Player>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}  \n","import React from \"react\";\nimport {\n    Route,\n    BrowserRouter as Routesr,\n    Switch,\n    HashRouter\n} from \"react-router-dom\";\n\n\nimport DashboardScreen from \"./component/DashboardScreen/DashboardScreen\";\n\n\nconst routes = () => (\n    <Routesr >\n        <Switch>\n            <Route exact path={ \"/\" } component={ DashboardScreen } />\n            <Route component={ Error } render={ () => <h1>404 Error</h1> } />\n        </Switch>\n    </Routesr>\n);\n\nexport default routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Router from \"./routes\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( <Router />, document.getElementById( \"root\" ) );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}